#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        q {
            bindings = <&kp Q>;
            key-positions = <1 0>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <2 1>;
        };

        y {
            bindings = <&kp Y>;
            key-positions = <10 9>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <4 5>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <8 9>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <10 11>;
        };

        lang1 {
            bindings = <&mt LEFT_GUI LANGUAGE_2>;
            key-positions = <7 8>;
        };

        lang2 {
            bindings = <&mt RIGHT_GUI LANGUAGE_1>;
            key-positions = <11 12>;
        };

        lsft {
            bindings = <&kp LSHFT>;
            key-positions = <6 7>;
        };

        lgui {
            bindings = <&kp LCTRL>;
            key-positions = <14 15>;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 17>;
        };

        layer4 {
            bindings = <&mo 4>;
            key-positions = <11 4>;
        };

        layer5 {
            bindings = <&mo 5>;
            key-positions = <5 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&mt LEFT_SHIFT W  &mt LEFT_CONTROL E  &mt LEFT_ALT T  &mt RIGHT_ALT Y  &mt RIGHT_CONTROL N  &mt RIGHT_SHIFT M  &kp A  &kp S  &kp D  &kp G  &kp H  &kp J  &kp K  &kp L  &mt LEFT_GUI BACKSPACE  &lt 2 SPACE  &lt 1 ENTER  &mt RIGHT_GUI MINUS
            >;
        };

        number_cursor {
            bindings = <
&mt LEFT_SHIFT NUMBER_1  &mt LEFT_CONTROL NUMBER_2  &mt LEFT_ALT NUMBER_3  &mt RIGHT_ALT NUMBER_4  &mt RIGHT_CONTROL N5  &mt RIGHT_SHIFT NUMBER_6  &kp N7  &kp N8  &kp N9  &kp N0  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT_ARROW  &mt LEFT_GUI DELETE  &lt 3 TAB  &trans  &kp RIGHT_GUI
            >;
        };

        function {
            bindings = <
&mt LEFT_SHIFT F1  &mt LEFT_CONTROL F2  &mt LEFT_ALT F3  &mt RIGHT_ALT F4  &mt RIGHT_CONTROL F5  &mt RIGHT_SHIFT F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp PAGE_UP  &kp PAGE_DOWN  &kp HOME  &kp END  &mt LEFT_GUI F11  &trans  &lt 4 ESCAPE  &mt RG(RIGHT_GUI) PLUS
            >;
        };

        mouse {
            bindings = <
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp ALT_ERASE  &none  &msc SCRL_DOWN  &msc SCRL_DOWN  &kp LEFT_GUI  &mkp MB4  &mkp MB3  &mkp MB5  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none  &trans  &mkp MB1  &mkp MB2
            >;
        };

        ble {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &trans  &bt BT_CLR
            >;
        };

        media {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &kp K_PREVIOUS  &kp K_PLAY_PAUSE  &trans  &bt BT_SEL 2  &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 3
            >;
        };
    };
};
